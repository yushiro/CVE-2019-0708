
#include "stdafx.h"

#define MAX_LOADSTRING 100

HINSTANCE hInst;
const WCHAR *szTitle = L"CVE-2019-0708 Exploit";
const WCHAR *szWindowClass = L"YOUPLAYCVELIKECXK";
WCHAR StatusText[128];
HWND hWnd;

ATOM                MyRegisterClass(HINSTANCE hInstance);
BOOL                InitInstance(HINSTANCE, int);
LRESULT CALLBACK    WndProc(HWND, UINT, WPARAM, LPARAM);

int APIENTRY wWinMain(_In_ HINSTANCE hInstance,
	_In_opt_ HINSTANCE hPrevInstance,
	_In_ LPWSTR    lpCmdLine,
	_In_ int       nCmdShow)
{
	UNREFERENCED_PARAMETER(hPrevInstance);
	UNREFERENCED_PARAMETER(lpCmdLine);

	wcscpy(StatusText, L"Ready");

	MyRegisterClass(hInstance);

	// Perform application initialization:
	if (!InitInstance(hInstance, nCmdShow))
	{
		return FALSE;
	}

	MSG msg;
	while (GetMessage(&msg, nullptr, 0, 0))
	{
		TranslateMessage(&msg);
		DispatchMessage(&msg);
	}

	return (int)msg.wParam;
}


ATOM MyRegisterClass(HINSTANCE hInstance)
{
	WNDCLASSEXW wcex;
	RtlSecureZeroMemory(&wcex, sizeof(WNDCLASSEXW));

	wcex.cbSize = sizeof(WNDCLASSEX);

	wcex.style = CS_HREDRAW | CS_VREDRAW;
	wcex.lpfnWndProc = WndProc;
	wcex.cbClsExtra = 0;
	wcex.cbWndExtra = 0;
	wcex.hInstance = hInstance;
	wcex.hIcon = LoadIcon(NULL, IDI_APPLICATION);
	wcex.hCursor = LoadCursor(nullptr, IDC_ARROW);
	wcex.hbrBackground = (HBRUSH)(COLOR_WINDOW);
	wcex.lpszClassName = szWindowClass;

	return RegisterClassExW(&wcex);
}


HWND hEdit;
HWND hSelectFileButton;
HWND hRunButton;

BOOL InitInstance(HINSTANCE hInstance, int nCmdShow)
{
	hInst = hInstance; // Store instance handle in our global variable

	hWnd = CreateWindowW(szWindowClass, szTitle, WS_OVERLAPPEDWINDOW,
		((GetSystemMetrics(SM_CXSCREEN) - 600) / 2), ((GetSystemMetrics(SM_CYSCREEN) - 480) / 2), 600, 480, nullptr, nullptr, hInstance, nullptr);

	if (!hWnd)
	{
		return FALSE;
	}

	hEdit = CreateWindowEx(WS_EX_CLIENTEDGE, TEXT("Edit"), TEXT("192.168.1.11"),
		WS_CHILD | WS_VISIBLE | ES_LEFT | ES_AUTOHSCROLL | ES_WANTRETURN | ES_MULTILINE, 20, 20, 400,
		400, hWnd, NULL, NULL, NULL);

	hSelectFileButton = CreateWindow(L"BUTTON", L"Select File", WS_CHILD | WS_VISIBLE, 440, 20, 120, 40, hWnd, (HMENU)1000, hInst, 0);
	hRunButton = CreateWindow(L"BUTTON", L"Run", WS_CHILD | WS_VISIBLE, 440, 80, 120, 40, hWnd, (HMENU)1001, hInst, 0);

	ShowWindow(hWnd, nCmdShow);
	UpdateWindow(hWnd);

	return TRUE;
}

void PaintContent(HWND hWnd, HDC hdc)
{
	RECT rect;
	SetBkMode(hdc, TRANSPARENT);
	//SetTextColor(hdc, COLOR);
	GetClientRect(hWnd, &rect);

	rect.left += 440;
	rect.top += 160;
	rect.right = rect.left + 120;
	rect.bottom = rect.top + 40;
	DrawText(hdc, StatusText, -1, &rect, DT_SINGLELINE | DT_CENTER | DT_VCENTER);
}

void CALLBACK UpdateText(HWND hwnd, UINT uMsg, UINT timerId, DWORD dwTime)
{
	KillTimer(NULL, timerId);
	wcscpy(StatusText, L"All Done");
	InvalidateRect(hWnd, NULL, true);
	SendMessage(hWnd, WM_PAINT, 0, 0);
	ShellExecute(NULL, NULL, L"https://www.youtube.com/watch?v=dQw4w9WgXcQ", NULL, NULL, SW_SHOW);
}

LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)
{
	switch (message)
	{
	case WM_PAINT:
	{
		PAINTSTRUCT ps;
		HDC hdc = BeginPaint(hWnd, &ps);
		PaintContent(hWnd, hdc);
		EndPaint(hWnd, &ps);
		break;
	}
	case WM_COMMAND:
		if (LOWORD(wParam) == 1000)
		{
			OPENFILENAME ofn;
			TCHAR szFile[260] = { 0 };
			ZeroMemory(&ofn, sizeof(ofn));
			ofn.lStructSize = sizeof(ofn);
			ofn.hwndOwner = hWnd;
			ofn.lpstrFile = szFile;
			ofn.nMaxFile = sizeof(szFile);
			ofn.lpstrFilter = _T("All\0*.*\0Executable\0*.EXE\0");
			ofn.nFilterIndex = 1;
			ofn.lpstrFileTitle = NULL;
			ofn.nMaxFileTitle = 0;
			ofn.lpstrInitialDir = NULL;
			ofn.Flags = OFN_PATHMUSTEXIST | OFN_FILEMUSTEXIST;

			if (GetOpenFileName(&ofn) == TRUE)
			{
				// stupid, it's not working
			}
		}
		else if (LOWORD(wParam) == 1001) {
			wcscpy(StatusText, L"Exploiting...");
			InvalidateRect(hWnd, NULL, true);
			SendMessage(hWnd, WM_PAINT, 0, 0);
			SetTimer(NULL, 0, 1000 * 1, (TIMERPROC)&UpdateText);
		}
		break;
	case WM_DESTROY:
		PostQuitMessage(0);
		break;
	default:
		return DefWindowProc(hWnd, message, wParam, lParam);
	}
	return 0;
}
